import UIKit
import RxSwift

enum MyError: Error {
      case anError
    }

// Publish cung cáº¥p giÃ¡ trá»‹ má»›i nháº¥t khi cÃ³ scubcriber Ä‘ki tá»›i

let disposeBag = DisposeBag()
let subject = PublishSubject<String>()

subject.onNext("1")

// subscribe 1
let subscription1 = subject
  .subscribe(onNext: { value in
    print("Sub 1: ", value)
  }, onCompleted: {
    print("sub 1: completed")
  })

// emit
subject.onNext("2")

// subscribe 2
let subscription2 = subject
  .subscribe(onNext: { value in
    print("Sub 2: ", value)
  }, onCompleted: {
    print("sub 2: completed")
  })

// emit
subject.onNext("3")
subject.onNext("4")
subject.onNext("5")

// dispose subscription2
subscription2.dispose()

// emit
subject.onNext("6")
subject.onNext("7")

// completed
subject.on(.completed)
// emit
subject.onNext("8")

// subscribe 3
subject .subscribe {
  print("sub 3: ", $0.element ?? $0)
}
.disposed(by: disposeBag)
// subcribe Ä‘ki tá»›i sau khÃ´ng nháº­n Ä‘c giÃ¡ trá»‹ trc Ä‘Ã³ subject phÃ¡t ra


// Behavior Subject sáº½ luÃ´n cung cáº¥p giÃ¡ trá»‹ cuá»‘i cÃ¹ng mÃ  nÃ³ phÃ¡t ra cho cÃ¡c subscriber khi Ä‘Äƒng kÃ­ tá»›i. NgoÃ i ra cÃ²n pháº£i cung cáº¥p giÃ¡ trá»‹ ban Ä‘áº§u cho nÃ³

// subcribe Ä‘ki tá»›i sau nháº­n Ä‘c giÃ¡ trá»‹ trc Ä‘Ã³ subject phÃ¡t ra

let subject2 = BehaviorSubject(value: "0")

subject2.subscribe {
       print("ðŸ”µ ", $0)
     }
   .disposed(by: disposeBag)

subject2.onNext("1")
subject2.onNext("5")

subject2.subscribe {
        print("ðŸ”´ ", $0)
      }
    .disposed(by: disposeBag)
subject2.subscribe {
       print("ðŸŸ  ", $0)
     }
   .disposed(by: disposeBag)
